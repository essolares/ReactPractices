{"ast":null,"code":"const reducer = (state, action) => {\n  if (action.type === 'CLEAR_CART') {\n    return { ...state,\n      cart: []\n    };\n  }\n\n  if (action.type === 'REMOVE_ITEM') {\n    return { ...state,\n      cart: state.cart.filter(cartItem => cartItem.id !== action.payload)\n    };\n  }\n\n  if (action.type === 'INCREASE') {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload) {\n        return { ...cartItem,\n          amount: cartItem.amount + 1\n        };\n      }\n\n      return cartItem;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === 'DECREASE') {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload) {\n        return { ...cartItem,\n          amount: cartItem.amount - 1\n        };\n      }\n\n      return cartItem;\n    }).filter(cartItem => cartItem.amount !== 0);\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === 'GET_TOTALS') {\n    let {\n      total,\n      amount\n    } = state.cart.reduce((cartTotal, cartItem) => {\n      const {\n        price,\n        amount\n      } = cartItem;\n      const itemTotal = price * amount;\n      cartTotal.total += itemTotal;\n      cartTotal.amount += amount;\n      return cartTotal;\n    }, {\n      total: 0,\n      amount: 0\n    });\n    total = parseFloat(total.toFixed(2));\n    return { ...state,\n      total,\n      amount\n    };\n  }\n\n  if (action.type === 'LOADING') {\n    return { ...state,\n      loading: true\n    };\n  }\n\n  if (action.type === 'DISPLAY_ITEMS') {\n    return { ...state,\n      cart: action.payload\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/edgar/Desktop/ReactPractices/Projects/ShoppingCart/src/reducer.js"],"names":["reducer","state","action","type","cart","filter","cartItem","id","payload","tempCart","map","amount","total","reduce","cartTotal","price","itemTotal","parseFloat","toFixed","loading"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC9B,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAiC;AAC7B,WAAO,EAAC,GAAGF,KAAJ;AAAUG,MAAAA,IAAI,EAAC;AAAf,KAAP;AACH;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAkC;AAC9B,WAAO,EAAC,GAAGF,KAAJ;AAAUG,MAAAA,IAAI,EAACH,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAmBC,QAAD,IAAYA,QAAQ,CAACC,EAAT,KAAgBL,MAAM,CAACM,OAArD;AAAf,KAAP;AACH;;AACD,MAAIN,MAAM,CAACC,IAAP,KAAgB,UAApB,EAA+B;AAC3B,QAAIM,QAAQ,GAAGR,KAAK,CAACG,IAAN,CAAWM,GAAX,CAAgBJ,QAAD,IAAY;AACtC,UAAIA,QAAQ,CAACC,EAAT,KAAgBL,MAAM,CAACM,OAA3B,EAAmC;AAC/B,eAAO,EAAC,GAAGF,QAAJ;AAAaK,UAAAA,MAAM,EAACL,QAAQ,CAACK,MAAT,GAAgB;AAApC,SAAP;AACH;;AACD,aAAOL,QAAP;AACH,KALc,CAAf;AAMA,WAAO,EAAC,GAAGL,KAAJ;AAAUG,MAAAA,IAAI,EAACK;AAAf,KAAP;AACH;;AACD,MAAIP,MAAM,CAACC,IAAP,KAAgB,UAApB,EAA+B;AAC3B,QAAIM,QAAQ,GAAGR,KAAK,CAACG,IAAN,CAAWM,GAAX,CAAgBJ,QAAD,IAAY;AACtC,UAAIA,QAAQ,CAACC,EAAT,KAAgBL,MAAM,CAACM,OAA3B,EAAmC;AAC/B,eAAO,EAAC,GAAGF,QAAJ;AAAaK,UAAAA,MAAM,EAACL,QAAQ,CAACK,MAAT,GAAgB;AAApC,SAAP;AACH;;AACD,aAAOL,QAAP;AACH,KALc,EAKXD,MALW,CAKHC,QAAD,IAAcA,QAAQ,CAACK,MAAT,KAAoB,CAL9B,CAAf;AAMA,WAAO,EAAC,GAAGV,KAAJ;AAAUG,MAAAA,IAAI,EAACK;AAAf,KAAP;AACH;;AACD,MAAIP,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAiC;AAC7B,QAAI;AAACS,MAAAA,KAAD;AAAOD,MAAAA;AAAP,QAAiBV,KAAK,CAACG,IAAN,CAAWS,MAAX,CACjB,CAACC,SAAD,EAAWR,QAAX,KAAsB;AAClB,YAAM;AAAES,QAAAA,KAAF;AAASJ,QAAAA;AAAT,UAAmBL,QAAzB;AACA,YAAMU,SAAS,GAAGD,KAAK,GAAGJ,MAA1B;AACAG,MAAAA,SAAS,CAACF,KAAV,IAAmBI,SAAnB;AACAF,MAAAA,SAAS,CAACH,MAAV,IAAoBA,MAApB;AACJ,aAAOG,SAAP;AACH,KAPoB,EAQrB;AAACF,MAAAA,KAAK,EAAC,CAAP;AAASD,MAAAA,MAAM,EAAC;AAAhB,KARqB,CAArB;AAUAC,IAAAA,KAAK,GAAGK,UAAU,CAACL,KAAK,CAACM,OAAN,CAAc,CAAd,CAAD,CAAlB;AACA,WAAO,EAAC,GAAGjB,KAAJ;AAAUW,MAAAA,KAAV;AAAgBD,MAAAA;AAAhB,KAAP;AACH;;AACD,MAAIT,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA8B;AAC1B,WAAO,EAAC,GAAGF,KAAJ;AAAWkB,MAAAA,OAAO,EAAC;AAAnB,KAAP;AACH;;AACD,MAAIjB,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAoC;AAChC,WAAO,EAAC,GAAGF,KAAJ;AAAWG,MAAAA,IAAI,EAACF,MAAM,CAACM;AAAvB,KAAP;AACH;;AAGD,SAAOP,KAAP;AACH,CAhDD;;AAkDA,eAAeD,OAAf","sourcesContent":["const reducer = (state,action) => {\n    if (action.type === 'CLEAR_CART'){\n        return {...state,cart:[]}\n    }\n    if (action.type === 'REMOVE_ITEM'){\n        return {...state,cart:state.cart.filter((cartItem)=>cartItem.id !== action.payload )}\n    }\n    if (action.type === 'INCREASE'){\n        let tempCart = state.cart.map((cartItem)=>{\n            if (cartItem.id === action.payload){\n                return {...cartItem,amount:cartItem.amount+1}\n            }\n            return cartItem\n        } )\n        return {...state,cart:tempCart}\n    }\n    if (action.type === 'DECREASE'){\n        let tempCart = state.cart.map((cartItem)=>{\n            if (cartItem.id === action.payload){\n                return {...cartItem,amount:cartItem.amount-1}\n            }\n            return cartItem\n        } ).filter((cartItem) => cartItem.amount !== 0)\n        return {...state,cart:tempCart}    \n    }\n    if (action.type === 'GET_TOTALS'){\n        let {total,amount} = state.cart.reduce(\n            (cartTotal,cartItem)=>{\n                const { price, amount} = cartItem;\n                const itemTotal = price * amount;\n                cartTotal.total += itemTotal;\n                cartTotal.amount += amount;\n            return cartTotal\n        },\n        {total:0,amount:0}\n        )\n        total = parseFloat(total.toFixed(2))\n        return {...state,total,amount}\n    }\n    if (action.type === 'LOADING'){\n        return {...state, loading:true}\n    }\n    if (action.type === 'DISPLAY_ITEMS'){\n        return {...state, cart:action.payload}\n    }\n\n\n    return state\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}