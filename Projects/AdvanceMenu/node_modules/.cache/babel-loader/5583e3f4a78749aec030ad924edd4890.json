{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/Desktop/ReactPractices/Projects/AdvanceMenu/src/context.js\";\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data';\nconst AppContext = React.createContext();\nconst [isSidebarOpen, setIsSidebarOpen] = useState(false);\nconst [isSubMenuOpen, setIsSubMenuOpen] = useState(false);\nconst [] = useState();\n\nconst openSidebar = () => {\n  setIsSidebarOpen(true);\n};\n\nconst closeSidebar = () => {\n  setIsSidebarOpen(false);\n};\n\nconst openSubMenu = () => {\n  setIsSubMenuOpen(true);\n};\n\nconst closeSubMenu = () => {\n  setIsSubMenuOpen(false);\n};\n\nconst AppProvider = ({\n  children\n}) => {\n  /*#__PURE__*/\n  React.createElement(AppContext.Provider, {\n    value: {\n      isSubMenuOpen,\n      isSidebarOpen,\n      openSubMenu,\n      openSidebar,\n      closeSubMenu,\n      closeSidebar\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport const useGlobalContext = () => {\n  return useContext(AppProvider);\n};","map":{"version":3,"sources":["/Users/edgar/Desktop/ReactPractices/Projects/AdvanceMenu/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","isSidebarOpen","setIsSidebarOpen","isSubMenuOpen","setIsSubMenuOpen","openSidebar","closeSidebar","openSubMenu","closeSubMenu","AppProvider","children","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;AACA,MAAM,CAACC,aAAD,EAAeC,gBAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,MAAM,CAACO,aAAD,EAAeC,gBAAf,IAAkCR,QAAQ,CAAC,KAAD,CAAhD;AACA,MAAM,KAAKA,QAAQ,EAAnB;;AAEA,MAAMS,WAAW,GAAG,MAAI;AACpBH,EAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,CAFD;;AAGA,MAAMI,YAAY,GAAG,MAAI;AACrBJ,EAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,CAFD;;AAGA,MAAMK,WAAW,GAAG,MAAI;AACpBH,EAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,CAFD;;AAGA,MAAMI,YAAY,GAAE,MAAI;AACpBJ,EAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,CAFD;;AAIA,MAAMK,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAChC;AAAA,sBAAC,UAAD,CAAY,QAAZ;AACA,IAAA,KAAK,EAAE;AAACP,MAAAA,aAAD;AAAeF,MAAAA,aAAf;AAA6BM,MAAAA,WAA7B;AAAyCF,MAAAA,WAAzC;AAAqDG,MAAAA,YAArD;AAAkEF,MAAAA;AAAlE,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKI,QAFL;AAIH,CALD;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAOd,UAAU,CAACY,WAAD,CAAjB;AACH,CAFM","sourcesContent":["import React, { useState, useContext } from 'react'\nimport sublinks from './data'\n\nconst AppContext = React.createContext();\nconst [isSidebarOpen,setIsSidebarOpen]= useState(false);\nconst [isSubMenuOpen,setIsSubMenuOpen]= useState(false);\nconst [] = useState();\n\nconst openSidebar = ()=>{\n    setIsSidebarOpen(true);\n}\nconst closeSidebar = ()=>{\n    setIsSidebarOpen(false);\n}\nconst openSubMenu = ()=>{\n    setIsSubMenuOpen(true);\n}\nconst closeSubMenu= ()=>{\n    setIsSubMenuOpen(false);\n}\n\nconst AppProvider = ({children}) => {\n    <AppContext.Provider \n    value={{isSubMenuOpen,isSidebarOpen,openSubMenu,openSidebar,closeSubMenu,closeSidebar}}>\n        {children}\n    </AppContext.Provider>\n}\n\nexport const useGlobalContext = () => {\n    return useContext(AppProvider)\n}"]},"metadata":{},"sourceType":"module"}